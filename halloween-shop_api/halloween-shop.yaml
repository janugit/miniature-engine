openapi: 3.0.0
info:
  title: halloween-shop-api
  description: |-
    API documentation to describe the Halloween Shop API.

    This API can be accessed after authenticating with a valid username and password using the `/login` endpoint.
  contact:
    name: Jahnavi
  version: "1.0"
servers:
- url: https://freddy.codesubmit.io
security:
- Authorization: []
tags:
- name: Auth
- name: Data
paths:
  /login:
    post:
      tags:
      - Auth
      summary: Login
      description: "Login will create a JWT `access_token` which can be used as a\
        \ bearer token to access other services on the Halloween API, this token will\
        \ expire after 15 minutes.\nThe response will include a `refresh_token`that\
        \ can be used to obtain a new `access_token` as required and is valid for\
        \ 30 days after issuance."
      operationId: login
      requestBody:
        description: Provide your username and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Bad request:
                  value:
                    message: Invalid request
                    code: error02
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Aunauthorized credentials:
                  value:
                    message: "Unauthorized credentials, please use a valid username\
                      \ and password"
                    code: error01
      security: []
  /dashboard:
    get:
      tags:
      - Data
      summary: Retrieve Dashboard Data
      description: Retrieve data to display the dashboard for the authenticated user.
      operationId: get-dashboard
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dashboardData'
  /refresh:
    post:
      tags:
      - Auth
      summary: Refresh access token
      description: |-
        Obtain a new access token by providing a valid `refresh_token` as the bearer token within the 30 day expiry.

        If the `refresh_token` has expired then you will receive a `401` unauthorized response.
      operationId: post-refresh
      parameters: []
      responses:
        "200":
          description: New auth response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "401":
          description: Expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
              examples:
                Expired:
                  value:
                    message: "Refresh token has expired, please try with a valid refresh\
                      \ token"
                    code: error02
      security:
      - Refresh: []
  /orders:
    get:
      tags:
      - Data
      summary: Your GET endpoint
      description: "Returns a list of orders in the system, the results are displayed\
        \ by a page of 10 Orders. The total number of Orders are returned.\n\nPagination\
        \ can be achieved using the `page` query parameter.\nSearching on a specific\
        \ term can be achieved using the `q` parameter."
      operationId: get-orders
      parameters:
      - name: page
        in: query
        description: Page to display
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: q
        in: query
        description: Search term to filer results
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/orderPage'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
components:
  schemas:
    loginResponse:
      title: loginResponse
      required:
      - access_token
      - expires_in
      - refresh_token
      - token_type
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        expires_in:
          type: number
          readOnly: true
          example: 900
          default: 900
        token_type:
          type: string
          readOnly: true
          example: Bearer
          default: Bearer
    errorResponse:
      title: errorResponse
      type: object
      properties:
        message:
          type: string
          example: Error message
        code:
          type: string
          example: error01
    dashboardData:
      title: dashboardData
      type: object
      properties:
        sales:
          $ref: '#/components/schemas/dashboardData_sales'
        orders:
          $ref: '#/components/schemas/dashboardData_orders'
        revenue_week:
          $ref: '#/components/schemas/dashboardData_revenue_week'
        revenue_month:
          $ref: '#/components/schemas/dashboardData_revenue_month'
        best_sellers:
          type: array
          items:
            $ref: '#/components/schemas/dashboardData_best_sellers'
    orderData:
      title: orderData
      required:
      - date
      - price
      - product_name
      - status
      type: object
      properties:
        product_name:
          type: string
          example: Item 1
        date:
          type: string
          format: date-time
          example: 2021-05-07T13:58:45Z
        price:
          type: number
        status:
          type: string
          example: Processing
          enum:
          - Processing
          - Shipped
          - Delivered
      description: response of an order
    orderPage:
      title: orderPage
      required:
      - orderData
      - page
      - pageTotal
      type: object
      properties:
        page:
          type: number
        pageTotal:
          type: number
        orderData:
          maxItems: 10
          type: array
          items:
            $ref: '#/components/schemas/orderData'
    body:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
          description: username for login
          example: freddy
        password:
          type: string
          description: password to login
          format: password
          example: ElmStreet2019
    dashboardData_sales:
      type: object
      properties:
        today:
          type: number
          example: 1456
        last_week:
          type: number
          example: 34000
        last_month:
          type: number
          example: 95000
    dashboardData_orders:
      type: object
      properties:
        today:
          type: number
          example: 9
        last_week:
          type: number
          example: 120
        last_month:
          type: number
          example: 876
    dashboardData_revenue_week:
      type: object
      properties:
        "1":
          type: number
          example: 3000
        "2":
          type: number
          example: 3200
        "3":
          type: number
          example: 2800
        "4":
          type: number
          example: 2400
        "5":
          type: number
          example: 3000
        "6":
          type: number
          example: 3200
        "7":
          type: number
          example: 3400
    dashboardData_revenue_month:
      type: object
      properties:
        "1":
          type: number
          example: 12000
        "2":
          type: number
          example: 13000
        "3":
          type: number
          example: 11000
        "4":
          type: number
          example: 10000
        "5":
          type: number
          example: 11500
        "6":
          type: number
          example: 12500
        "7":
          type: number
          example: 14000
        "8":
          type: number
          example: 15000
        "9":
          type: number
          example: 15500
        "10":
          type: number
          example: 16000
        "11":
          type: number
          example: 18000
        "12":
          type: number
          example: 19000
    dashboardData_best_sellers:
      type: object
      properties:
        product_name:
          type: string
          example: Item 1
        price:
          type: integer
        units_sold:
          type: number
        revenue:
          type: integer
  securitySchemes:
    Authorization:
      type: http
      description: Access token from /login endpoint
      scheme: bearer
    Refresh:
      type: http
      scheme: bearer
